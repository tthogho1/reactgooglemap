import type {Sdp, Ice, Candidate, ChatMessage, MessageContent} from '../types/webrtc';

const handleWebRTCConnectionMessage = async(chatMessage: ChatMessage) => {
    const data = chatMessage.message as Sdp| Ice ;

    switch(data.type) {
      case 'offer':
        const user_id = chatMessage.user_id;
        if (!confirm(`${user_id}からの接続を受け付けますか?`)) {
           return; 
        } 
        // document.getElementById('to_id').value = user_id;
        await setupAndRespondToSdp((data as Sdp).sdp);
        break;
      case 'answer':
        if (pc.signalingState !== 'stable') {
          //console.log(data.sdp);
          await pc.setRemoteDescription({ type: 'answer', sdp: (data as Sdp).sdp }).then(()=>{
              console.log('set answer to remote description');
            }
          ).catch( 
            error => console.log(error) 
          );
        }else{
          console.log('Connection already in stable state, skipping setRemoteDescription');
        }
        break;
      case 'ice':

        if (pc == null){
          console.log('pc is null');
          return;
        }
        await pc.addIceCandidate((data as Ice).candidate).then(()=>
          {
            console.log('add ice candidate from server')
          }
        ).catch(
          error => console.log(error)
        );
        break;
    }
}

async function setupAndRespondToSdp(sdpMessage) {
    pc = new RTCPeerConnection(configuration);
  
    pc.ontrack = (event) => {
      console.log('ontrack');
  
      remoteStream = event.streams[0];
      const remoteVideoElement = document.getElementById('remote-video');
      if (remoteVideoElement) {
        remoteVideoElement.srcObject = remoteStream;
      } else {
        console.error('リモートビデオ要素が見つかりません');
      }
    };
  
    // ビデオストリームの処理
    stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
    stream.getTracks().forEach(
      track => {
        console.log('Adding track:', track.kind),
        pc.addTrack(track, stream)
      }
    );
  
    // ビデオ要素への表示
    const videoElement = document.getElementById('local-video');
    videoElement.srcObject = stream;
  
    //  OfferをRemoteに登録
    console.log("get offer from server");
    await pc.setRemoteDescription({ type: 'offer', sdp: sdpMessage })
    .then( 
      console.log("set remote description") 
    )
    .catch( 
      error => console.log(error) 
    );
    
    const offer = await pc.createAnswer();
    await pc.setLocalDescription(offer)
    .then(
      console.log("set local description")
    ).catch(
      error => console.log(error)
    );
  
    // ICE Candidateの処理
    pc.onicecandidate = (event) => {
      if (event.candidate) {
        console.log('onicecandidate');
        candidates.push(event.candidate);
  
        const messageObject = {
          user_id : document.getElementById('user_id').value,
          to_id : document.getElementById('to_id').value,
          message: { type: 'ice', candidate: event.candidate }
        }
        socket.send(JSON.stringify(messageObject));
      }
    }; 
  
    const messageObject = {
        user_id : document.getElementById('user_id').value,
        to_id : document.getElementById('to_id').value,
        message: { type: 'answer', sdp: offer.sdp }
    };
    console.log("send answer");
    socket.send(JSON.stringify(messageObject));

  }
  



export { handleWebRTCConnectionMessage }